import streamlit as st
import pandas as pd
import io
from datetime import datetime
import calendar
import paramiko
import time
import os
import logging
from pathlib import Path
from PIL import Image

# Configuraci√≥n de logging
logging.basicConfig(
    filename='monitoreo_congresos.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d'
)

# ====================
# CONFIGURACI√ìN INICIAL
# ====================
class Config:
    def __init__(self):
        # Configuraci√≥n SFTP
        self.REMOTE_CONGRESOS_FILE = "pro_congresos_total.csv"  # Nombre completo del archivo remoto
        self.REMOTE_GENERADOR_PATH = f"{st.secrets['sftp']['dir']}/{st.secrets['prefixes']['generadorcongresos']}"
        self.TIMEOUT_SECONDS = 30
        
        self.REMOTE = {
            'HOST': st.secrets["sftp"]["host"],
            'USER': st.secrets["sftp"]["user"],
            'PASSWORD': st.secrets["sftp"]["password"],
            'PORT': st.secrets["sftp"]["port"],
            'DIR': st.secrets["sftp"]["dir"]
        }
        
        # Configuraci√≥n de estilo
        self.HIGHLIGHT_COLOR = "#90EE90"
        self.LOGO_PATH = "escudo_COLOR.jpg"

CONFIG = Config()

# ==================
# CLASE SSH MEJORADA
# ==================
class SSHManager:
    MAX_RETRIES = 3
    RETRY_DELAY = 5  # segundos

    @staticmethod
    def get_connection():
        """Establece conexi√≥n SSH segura con reintentos"""
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        for attempt in range(SSHManager.MAX_RETRIES):
            try:
                ssh.connect(
                    hostname=CONFIG.REMOTE['HOST'],
                    port=CONFIG.REMOTE['PORT'],
                    username=CONFIG.REMOTE['USER'],
                    password=CONFIG.REMOTE['PASSWORD'],
                    timeout=CONFIG.TIMEOUT_SECONDS
                )
                logging.info(f"Conexi√≥n SSH establecida (intento {attempt + 1})")
                return ssh
            except Exception as e:
                logging.warning(f"Intento {attempt + 1} fallido: {str(e)}")
                if attempt < SSHManager.MAX_RETRIES - 1:
                    time.sleep(SSHManager.RETRY_DELAY)
                else:
                    logging.error("Fallo definitivo al conectar via SSH")
                    st.error(f"Error de conexi√≥n SSH despu√©s de {SSHManager.MAX_RETRIES} intentos: {str(e)}")
                    return None

    @staticmethod
    def verify_file_integrity(local_path, remote_path, sftp):
        """Verifica que el archivo se transfiri√≥ correctamente"""
        try:
            local_size = os.path.getsize(local_path)
            remote_size = sftp.stat(remote_path).st_size
            return local_size == remote_size
        except Exception as e:
            logging.error(f"Error verificando integridad: {str(e)}")
            return False

    @staticmethod
    def download_remote_file(remote_path, local_path):
        """Descarga un archivo con verificaci√≥n de integridad"""
        for attempt in range(SSHManager.MAX_RETRIES):
            ssh = SSHManager.get_connection()
            if not ssh:
                return False
                
            try:
                with ssh.open_sftp() as sftp:
                    try:
                        sftp.stat(remote_path)
                    except FileNotFoundError:
                        logging.error(f"Archivo remoto no encontrado: {remote_path}")
                        return False
                        
                    sftp.get(remote_path, local_path)
                    
                    if SSHManager.verify_file_integrity(local_path, remote_path, sftp):
                        logging.info(f"Archivo descargado correctamente: {remote_path} a {local_path}")
                        return True
                    else:
                        logging.warning(f"Error de integridad en descarga, reintentando... (intento {attempt + 1})")
                        if attempt < SSHManager.MAX_RETRIES - 1:
                            time.sleep(SSHManager.RETRY_DELAY)
                        else:
                            raise Exception("Fallo en verificaci√≥n de integridad despu√©s de m√∫ltiples intentos")
                            
            except Exception as e:
                logging.error(f"Error en descarga (intento {attempt + 1}): {str(e)}")
                if attempt == SSHManager.MAX_RETRIES - 1:
                    st.error(f"Error descargando archivo remoto despu√©s de {SSHManager.MAX_RETRIES} intentos: {str(e)}")
                    return False
                    
            finally:
                ssh.close()

def ejecutar_generador_remoto():
    """Ejecuta el script generadorcongresos.sh en el servidor remoto"""
    ssh = None
    try:
        with st.spinner("üîÑ Ejecutando generadorcongresos.sh en servidor remoto..."):
            # Establecer conexi√≥n SSH
            ssh = SSHManager.get_connection()
            if not ssh:
                return False

            # 1. Verificar que el script existe
            sftp = ssh.open_sftp()
            try:
                sftp.stat(CONFIG.REMOTE_GENERADOR_PATH)
                logging.info(f"Script encontrado en: {CONFIG.REMOTE_GENERADOR_PATH}")
            except FileNotFoundError:
                st.error(f"‚ùå Error: No se encontr√≥ el script en {CONFIG.REMOTE_GENERADOR_PATH}")
                logging.error(f"Script no encontrado: {CONFIG.REMOTE_GENERADOR_PATH}")
                return False
            finally:
                sftp.close()

            # 2. Ejecutar el script en el directorio correcto
            comando = f"cd {CONFIG.REMOTE['DIR']} && bash {CONFIG.REMOTE_GENERADOR_PATH}"
            logging.info(f"Ejecutando comando: {comando}")
            
            stdin, stdout, stderr = ssh.exec_command(comando)
            exit_status = stdout.channel.recv_exit_status()
            output = stdout.read().decode('utf-8').strip()
            error = stderr.read().decode('utf-8').strip()

            # 3. Verificar resultados
            if exit_status != 0:
                error_msg = f"C√≥digo {exit_status}\nOutput: {output}\nError: {error}"
                st.error(f"‚ùå Error en la ejecuci√≥n: {error_msg}")
                logging.error(f"Error ejecutando generadorcongresos.sh: {error_msg}")
                return False

            logging.info("Script ejecutado correctamente")
            
            # 4. Verificar que el archivo se cre√≥ en la ubicaci√≥n correcta
            sftp = ssh.open_sftp()
            output_path = os.path.join(CONFIG.REMOTE['DIR'], CONFIG.REMOTE_CONGRESOS_FILE)
            try:
                sftp.stat(output_path)
                file_size = sftp.stat(output_path).st_size
                logging.info(f"Archivo creado en: {output_path} (Tama√±o: {file_size} bytes)")
                st.success("‚úÖ generadorcongresos.sh ejecutado correctamente en el servidor")
                return True
                
            except FileNotFoundError:
                error_msg = f"No se encontr√≥ el archivo de salida en {output_path}"
                st.error(f"‚ùå Error: {error_msg}")
                logging.error(error_msg)
                return False
            finally:
                sftp.close()

    except Exception as e:
        error_msg = f"Error inesperado: {str(e)}"
        st.error(f"‚ùå {error_msg}")
        logging.error(f"Error en ejecutar_generador_remoto: {error_msg}")
        return False
    finally:
        if ssh:
            ssh.close()

def sync_congresos_file():
    """Sincroniza el archivo congresos_total.csv desde el servidor remoto"""
    try:
        remote_path = os.path.join(CONFIG.REMOTE['DIR'], CONFIG.REMOTE_CONGRESOS_FILE)
        local_path = "congresos_total.csv"
        
        with st.spinner("üîÑ Sincronizando archivo congresos_total.csv desde el servidor..."):
            if SSHManager.download_remote_file(remote_path, local_path):
                st.success("‚úÖ Archivo congresos_total.csv sincronizado correctamente")
                return True
            else:
                st.error("‚ùå No se pudo descargar el archivo congresos_total.csv del servidor")
                return False
    except Exception as e:
        st.error(f"‚ùå Error en sincronizaci√≥n: {str(e)}")
        logging.error(f"Sync Error: {str(e)}")
        return False

def highlight_participant(name: str, investigator_name: str) -> str:
    """Resalta el nombre del investigador principal"""
    if investigator_name and investigator_name.lower() == name.lower():
        return f"<span style='background-color: {CONFIG.HIGHLIGHT_COLOR};'>{name}</span>"
    return name

def main():
    st.set_page_config(
        page_title="An√°lisis de Congresos",
        page_icon="üé§",
        layout="wide"
    )

    # A√±adir logo en la parte superior
    if Path(CONFIG.LOGO_PATH).exists():
        st.image(CONFIG.LOGO_PATH, width=200)

    st.title("An√°lisis de Congresos")

    # Paso 1: Ejecutar generador remoto para actualizar datos
    if not ejecutar_generador_remoto():
        st.warning("‚ö†Ô∏è Continuando con datos existentes (pueden no estar actualizados)")

    # Paso 2: Sincronizar archivo congresos_total.csv
    if not sync_congresos_file():
        st.warning("‚ö†Ô∏è Trabajando con copia local de congresos_total.csv debido a problemas de conexi√≥n")

    # Verificar si el archivo local existe
    if not Path("congresos_total.csv").exists():
        st.error("No se encontr√≥ el archivo congresos_total.csv")
        return

    try:
        # Leer y procesar el archivo
        df = pd.read_csv("congresos_total.csv", header=0, encoding='utf-8')
        df.columns = df.columns.str.strip()  # Limpiar espacios en nombres de columnas

        # Verificaci√≥n de columnas (para diagn√≥stico)
        logging.info(f"Columnas detectadas: {df.columns.tolist()}")

        # Verificar que los campos importantes existen
        required_columns = ['economic_number', 'titulo_congreso', 'fecha_exacta_congreso', 'estado']
        missing_columns = [col for col in required_columns if col not in df.columns]

        if missing_columns:
            st.warning(f"El archivo congresos_total.csv no contiene los campos requeridos: {', '.join(missing_columns)}")
            return

        # Convertir y validar fechas
        df['fecha_exacta_congreso'] = pd.to_datetime(df['fecha_exacta_congreso'], errors='coerce')
        df = df[(df['estado'] == 'A') & (df['fecha_exacta_congreso'].notna())]

        if df.empty:
            st.warning("No hay congresos v√°lidos para analizar")
            return

        st.success(f"Datos cargados correctamente. Registros activos: {len(df)}")

        # Obtener rangos de fechas disponibles
        min_date = df['fecha_exacta_congreso'].min()
        max_date = df['fecha_exacta_congreso'].max()

        # Selector de rango mes-a√±o con ayuda
        st.header("üìÖ Selecci√≥n de Periodo")
        col1, col2 = st.columns(2)

        with col1:
            start_year = st.selectbox("A√±o inicio",
                                   range(min_date.year, max_date.year+1),
                                   index=0,
                                   help="Selecciona el a√±o inicial para el an√°lisis.")
            start_month = st.selectbox("Mes inicio",
                                    range(1, 13),
                                    index=min_date.month-1,
                                    format_func=lambda x: datetime(1900, x, 1).strftime('%B'),
                                    help="Selecciona el mes inicial para el an√°lisis.")

        with col2:
            end_year = st.selectbox("A√±o t√©rmino",
                                  range(min_date.year, max_date.year+1),
                                  index=len(range(min_date.year, max_date.year+1))-1,
                                  help="Selecciona el a√±o final para el an√°lisis.")
            end_month = st.selectbox("Mes t√©rmino",
                                   range(1, 13),
                                   index=max_date.month-1,
                                   format_func=lambda x: datetime(1900, x, 1).strftime('%B'),
                                   help="Selecciona el mes final para el an√°lisis.")

        # Calcular fechas de inicio y fin
        start_day = 1
        end_day = calendar.monthrange(end_year, end_month)[1]

        date_start = datetime(start_year, start_month, start_day)
        date_end = datetime(end_year, end_month, end_day)

        # Filtrar dataframe
        filtered_df = df[(df['fecha_exacta_congreso'] >= pd.to_datetime(date_start)) &
                       (df['fecha_exacta_congreso'] <= pd.to_datetime(date_end))]

        # Obtener congresos √∫nicos para estad√≠sticas precisas
        unique_congresos = filtered_df.drop_duplicates(subset=['titulo_congreso'])

        st.markdown(f"**Periodo seleccionado:** {date_start.strftime('%d/%m/%Y')} - {date_end.strftime('%d/%m/%Y')}",
                   help="Rango de fechas seleccionado para el an√°lisis.")
        st.markdown(f"**Registros encontrados:** {len(filtered_df)}",
                   help="Total de registros en el periodo, incluyendo posibles duplicados del mismo congreso.")
        st.markdown(f"**Congresos √∫nicos:** {len(unique_congresos)}",
                   help="Cantidad de congresos distintos, eliminando duplicados.")

        if len(filtered_df) != len(unique_congresos):
            st.warning(f"‚ö†Ô∏è **Nota:** Se detectaron {len(filtered_df) - len(unique_congresos)} registros duplicados del mismo congreso.")

        if filtered_df.empty:
            st.warning("No hay congresos en el periodo seleccionado")
            return

        # An√°lisis consolidado en tablas
        st.header("üìä Estad√≠sticas Consolidadas",
                help="M√©tricas generales basadas en los filtros aplicados.")

        # Tabla 1: Participaci√≥n por investigador
        st.subheader("üîç Participaci√≥n por investigador",
                   help="Muestra cu√°ntos congresos √∫nicos tiene cada investigador y su rol de participaci√≥n.")

        # Crear dataframe con informaci√≥n de participaci√≥n
        investigator_stats = filtered_df.groupby('economic_number').agg(
            Congresos_Unicos=('titulo_congreso', lambda x: len(set(x))),
            Rol_Participacion=('rol', lambda x: ', '.join(sorted(set(x)))),
            Nombre=('nombramiento', 'first')  # Asumimos que nombramiento es √∫nico por economic_number
        ).reset_index()

        investigator_stats = investigator_stats.sort_values('Congresos_Unicos', ascending=False)
        investigator_stats.columns = ['N√∫mero Econ√≥mico', 'Congresos √∫nicos', 'Rol de participaci√≥n', 'Nombramiento']

        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'N√∫mero Econ√≥mico': ['TOTAL'],
            'Congresos √∫nicos': [investigator_stats['Congresos √∫nicos'].sum()],
            'Rol de participaci√≥n': [''],
            'Nombramiento': ['']
        })
        investigator_stats = pd.concat([investigator_stats.head(10), total_row], ignore_index=True)

        # Mostrar tabla con enlaces clickeables
        for index, row in investigator_stats.iterrows():
            if row['N√∫mero Econ√≥mico'] != 'TOTAL':
                # Crear un expander para cada investigador
                with st.expander(f"{row['N√∫mero Econ√≥mico']} - {row['Congresos √∫nicos']} congresos"):
                    # Filtrar los congresos del investigador
                    investigator_congresos = filtered_df[filtered_df['economic_number'] == row['N√∫mero Econ√≥mico']]
                    unique_congresos_investigator = investigator_congresos.drop_duplicates(subset=['titulo_congreso'])

                    # Mostrar los congresos
                    display_columns = ['titulo_congreso', 'institucion', 'tipo_congreso', 'pais',
                                     'a√±o_congreso', 'fecha_exacta_congreso', 'rol', 'titulo_ponencia']

                    st.write(f"Congresos de {row['N√∫mero Econ√≥mico']}:")
                    st.dataframe(unique_congresos_investigator[display_columns])

                    # Opci√≥n para descargar en CSV
                    csv = unique_congresos_investigator.to_csv(index=False).encode('utf-8')
                    st.download_button(
                        label="Descargar participaci√≥n en congresos (CSV)",
                        data=csv,
                        file_name=f"congresos_{row['N√∫mero Econ√≥mico']}.csv",
                        mime='text/csv',
                        key=f"download_{index}"
                    )

        # Tabla 2: Instituciones organizadoras m√°s frecuentes
        st.subheader("üèõÔ∏è Instituciones organizadoras",
                   help="Listado de instituciones que organizaron congresos, ordenadas por frecuencia.")
        institucion_stats = unique_congresos.groupby('institucion').agg(
            Total_Congresos=('institucion', 'size')
        ).reset_index()
        institucion_stats = institucion_stats.sort_values('Total_Congresos', ascending=False)
        institucion_stats.columns = ['Instituci√≥n', 'Congresos √∫nicos']

        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Instituci√≥n': ['TOTAL'],
            'Congresos √∫nicos': [institucion_stats['Congresos √∫nicos'].sum()]
        })
        institucion_stats = pd.concat([institucion_stats.head(10), total_row], ignore_index=True)
        st.dataframe(institucion_stats, hide_index=True)

        # Tabla 3: Tipos de congreso m√°s comunes
        st.subheader("üåç Tipo de congreso",
                   help="Distribuci√≥n de congresos por tipo (Nacional/Internacional).")
        tipo_stats = unique_congresos['tipo_congreso'].value_counts().reset_index()
        tipo_stats.columns = ['Tipo de Congreso', 'Congresos √∫nicos']

        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Tipo de Congreso': ['TOTAL'],
            'Congresos √∫nicos': [tipo_stats['Congresos √∫nicos'].sum()]
        })
        tipo_stats = pd.concat([tipo_stats, total_row], ignore_index=True)
        st.dataframe(tipo_stats, hide_index=True)

        # Tabla 4: Pa√≠ses m√°s frecuentes
        st.subheader("üìç Pa√≠ses donde se realizaron",
                   help="Distribuci√≥n de congresos por pa√≠s de realizaci√≥n.")
        pais_stats = unique_congresos['pais'].value_counts().reset_index()
        pais_stats.columns = ['Pa√≠s', 'Congresos √∫nicos']

        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Pa√≠s': ['TOTAL'],
            'Congresos √∫nicos': [pais_stats['Congresos √∫nicos'].sum()]
        })
        pais_stats = pd.concat([pais_stats, total_row], ignore_index=True)
        st.dataframe(pais_stats, hide_index=True)

        # Tabla 5: Roles de participaci√≥n
        st.subheader("üé≠ Roles de participaci√≥n",
                   help="Distribuci√≥n de los roles de participaci√≥n en los congresos.")
        rol_stats = filtered_df['rol'].value_counts().reset_index()
        rol_stats.columns = ['Rol', 'Participaciones']

        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Rol': ['TOTAL'],
            'Participaciones': [rol_stats['Participaciones'].sum()]
        })
        rol_stats = pd.concat([rol_stats, total_row], ignore_index=True)
        st.dataframe(rol_stats, hide_index=True)

        # Tabla 6: L√≠neas de investigaci√≥n m√°s frecuentes
        st.subheader("üß™ L√≠neas de investigaci√≥n",
                   help="L√≠neas de investigaci√≥n m√°s frecuentes en los congresos.")
        try:
            all_keywords = []
            for keywords in unique_congresos['linea_investigacion']:
                if pd.notna(keywords):
                    # Procesamiento de palabras clave
                    keywords_str = str(keywords).strip()
                    # Si la l√≠nea ya est√° entre comillas, tomarla como una sola
                    if (keywords_str.startswith('"') and keywords_str.endswith('"')) or \
                       (keywords_str.startswith("'") and keywords_str.endswith("'")):
                        all_keywords.append(keywords_str[1:-1])
                    else:
                        # Si no est√° entre comillas, agregar toda la cadena como una sola l√≠nea
                        all_keywords.append(keywords_str)

            keyword_stats = pd.Series(all_keywords).value_counts().reset_index()
            keyword_stats.columns = ['L√≠nea de investigaci√≥n', 'Frecuencia']

            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'L√≠nea de investigaci√≥n': ['TOTAL'],
                'Frecuencia': [keyword_stats['Frecuencia'].sum()]
            })
            keyword_stats = pd.concat([keyword_stats.head(10), total_row], ignore_index=True)
            st.dataframe(keyword_stats, hide_index=True)
        except Exception as e:
            st.warning(f"No se pudieron procesar las l√≠neas de investigaci√≥n: {str(e)}")
            logging.error(f"Error procesando l√≠neas de investigaci√≥n: {str(e)}")

        # Tabla 7: Distribuci√≥n por departamentos
        if 'departamento' in unique_congresos.columns:
            st.subheader("üè¢ Departamentos de adscripci√≥n",
                       help="Distribuci√≥n de congresos por departamento de adscripci√≥n del participante.")
            depto_stats = unique_congresos['departamento'].value_counts().reset_index()
            depto_stats.columns = ['Departamento', 'Congresos √∫nicos']

            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Departamento': ['TOTAL'],
                'Congresos √∫nicos': [depto_stats['Congresos √∫nicos'].sum()]
            })
            depto_stats = pd.concat([depto_stats, total_row], ignore_index=True)
            st.dataframe(depto_stats, hide_index=True)
        else:
            st.warning("El campo 'departamento' no est√° disponible en los datos")

        # Tabla 8: Distribuci√≥n temporal
        st.subheader("üï∞Ô∏è Distribuci√≥n mensual",
                    help="Evoluci√≥n mensual de participaci√≥n en congresos en el periodo seleccionado.")

        # Convertir a formato "YYYY-MM"
        time_stats = unique_congresos['fecha_exacta_congreso'].dt.to_period('M').astype(str).value_counts().sort_index().reset_index()
        time_stats.columns = ['Mes-A√±o', 'Congresos √∫nicos']

        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Mes-A√±o': ['TOTAL'],
            'Congresos √∫nicos': [time_stats['Congresos √∫nicos'].sum()]
        })
        time_stats = pd.concat([time_stats, total_row], ignore_index=True)
        st.dataframe(time_stats, hide_index=True)

        # Tabla 9: Distribuci√≥n por nivel SNI
        if 'sni' in unique_congresos.columns:
            st.subheader("üìä Nivel SNI de participantes",
                        help="Distribuci√≥n de participaci√≥n en congresos por nivel SNI.")
            sni_stats = unique_congresos['sni'].value_counts().reset_index()
            sni_stats.columns = ['Nivel SNI', 'Congresos √∫nicos']

            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Nivel SNI': ['TOTAL'],
                'Congresos √∫nicos': [sni_stats['Congresos √∫nicos'].sum()]
            })
            sni_stats = pd.concat([sni_stats, total_row], ignore_index=True)
            st.dataframe(sni_stats, hide_index=True)
        else:
            st.warning("El campo 'sni' no est√° disponible en los datos")

        # Tabla 10: Distribuci√≥n por nivel SII
        if 'sii' in unique_congresos.columns:
            st.subheader("üìà Nivel SII de participantes",
                        help="Distribuci√≥n de participaci√≥n en congresos por nivel SII.")
            sii_stats = unique_congresos['sii'].value_counts().reset_index()
            sii_stats.columns = ['Nivel SII', 'Congresos √∫nicos']

            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Nivel SII': ['TOTAL'],
                'Congresos √∫nicos': [sii_stats['Congresos √∫nicos'].sum()]
            })
            sii_stats = pd.concat([sii_stats, total_row], ignore_index=True)
            st.dataframe(sii_stats, hide_index=True)
        else:
            st.warning("El campo 'sii' no est√° disponible en los datos")

        # Tabla 11: Distribuci√≥n por nombramiento
        if 'nombramiento' in unique_congresos.columns:
            st.subheader("üëî Tipo de nombramiento",
                        help="Distribuci√≥n de participaci√≥n en congresos por tipo de nombramiento.")
            nombramiento_stats = unique_congresos['nombramiento'].value_counts().reset_index()
            nombramiento_stats.columns = ['Tipo de Nombramiento', 'Congresos √∫nicos']

            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Tipo de Nombramiento': ['TOTAL'],
                'Congresos √∫nicos': [nombramiento_stats['Congresos √∫nicos'].sum()]
            })
            nombramiento_stats = pd.concat([nombramiento_stats, total_row], ignore_index=True)
            st.dataframe(nombramiento_stats, hide_index=True)
        else:
            st.warning("El campo 'nombramiento' no est√° disponible en los datos")

        # ==========================================
        # SECCI√ìN: DESCARGAR ARCHIVO COMPLETO
        # ==========================================
        st.header("üì• Descargar Datos Completos")

        # Opci√≥n para descargar el archivo pro_congresos_total.csv
        if Path("congresos_total.csv").exists():
            with open("congresos_total.csv", "rb") as file:
                btn = st.download_button(
                    label="Descargar archivo pro_congresos_total.csv completo",
                    data=file,
                    file_name="pro_congresos_total.csv",
                    mime="text/csv",
                    help="Descarga el archivo CSV completo con todos los datos de congresos"
                )
            if btn:
                st.success("Descarga iniciada")
        else:
            st.warning("El archivo congresos_total.csv no est√° disponible para descargar")

    except Exception as e:
        st.error(f"Error al procesar el archivo: {str(e)}")
        logging.error(f"Error en main: {str(e)}")

if __name__ == "__main__":
    main()
