import streamlit as st
import pandas as pd
import io
from datetime import datetime
import calendar
import paramiko
import time
import os
import logging
import zipfile
from pathlib import Path
from PIL import Image

# Configuraci√≥n de logging
logging.basicConfig(
    filename='monitoreo_congresos.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# ====================
# CATEGOR√çAS DE KEYWORDS PARA CONGRESOS
# ====================
KEYWORD_CATEGORIES = {
    "Cardiolog√≠a": ["cardio", "coraz√≥n", "miocardio", "arritmia", "isquemia", "hipertensi√≥n", "ECG", "insuficiencia card√≠aca"],
    "Neurolog√≠a": ["neuro", "cerebro", "ictus", "alzheimer", "parkinson", "demencia"],
    # ... (puedes agregar m√°s categor√≠as relevantes)
}

# ====================
# CONFIGURACI√ìN INICIAL
# ====================
class Config:
    def __init__(self):
        # Configuraci√≥n SFTP
        self.REMOTE_CONGRESOS_FILE = "pro_congresos_total.csv"  # Nombre completo del archivo remoto
        self.REMOTE_GENERADOR_PATH = f"{st.secrets['sftp']['dir']}/{st.secrets['prefixes']['generadorcongresos']}"
        self.TIMEOUT_SECONDS = 30
        
        self.REMOTE = {
            'HOST': st.secrets["sftp"]["host"],
            'USER': st.secrets["sftp"]["user"],
            'PASSWORD': st.secrets["sftp"]["password"],
            'PORT': st.secrets["sftp"]["port"],
            'DIR': st.secrets["sftp"]["dir"]
        }
        
        # Configuraci√≥n de estilo
        self.HIGHLIGHT_COLOR = "#90EE90"
        self.LOGO_PATH = "escudo_COLOR.jpg"
        self.COLUMN_WIDTH = "200px"  # Ancho fijo para todas las columnas

CONFIG = Config()

# ==================
# CLASE SSH MEJORADA (se mantiene igual)
# ==================
class SSHManager:
    MAX_RETRIES = 3
    RETRY_DELAY = 5  # segundos

    @staticmethod
    def get_connection():
        """Establece conexi√≥n SSH segura con reintentos"""
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        for attempt in range(SSHManager.MAX_RETRIES):
            try:
                ssh.connect(
                    hostname=CONFIG.REMOTE['HOST'],
                    port=CONFIG.REMOTE['PORT'],
                    username=CONFIG.REMOTE['USER'],
                    password=CONFIG.REMOTE['PASSWORD'],
                    timeout=CONFIG.TIMEOUT_SECONDS
                )
                logging.info(f"Conexi√≥n SSH establecida (intento {attempt + 1})")
                return ssh
            except Exception as e:
                logging.warning(f"Intento {attempt + 1} fallido: {str(e)}")
                if attempt < SSHManager.MAX_RETRIES - 1:
                    time.sleep(SSHManager.RETRY_DELAY)
                else:
                    logging.error("Fallo definitivo al conectar via SSH")
                    st.error(f"Error de conexi√≥n SSH despu√©s de {SSHManager.MAX_RETRIES} intentos: {str(e)}")
                    return None

    @staticmethod
    def verify_file_integrity(local_path, remote_path, sftp):
        """Verifica que el archivo se transfiri√≥ correctamente"""
        try:
            local_size = os.path.getsize(local_path)
            remote_size = sftp.stat(remote_path).st_size
            return local_size == remote_size
        except Exception as e:
            logging.error(f"Error verificando integridad: {str(e)}")
            return False

    @staticmethod
    def download_remote_file(remote_path, local_path):
        """Descarga un archivo con verificaci√≥n de integridad"""
        for attempt in range(SSHManager.MAX_RETRIES):
            ssh = SSHManager.get_connection()
            if not ssh:
                return False
                
            try:
                with ssh.open_sftp() as sftp:
                    try:
                        sftp.stat(remote_path)
                    except FileNotFoundError:
                        logging.error(f"Archivo remoto no encontrado: {remote_path}")
                        return False
                        
                    sftp.get(remote_path, local_path)
                    
                    if SSHManager.verify_file_integrity(local_path, remote_path, sftp):
                        logging.info(f"Archivo descargado correctamente: {remote_path} a {local_path}")
                        return True
                    else:
                        logging.warning(f"Error de integridad en descarga, reintentando... (intento {attempt + 1})")
                        if attempt < SSHManager.MAX_RETRIES - 1:
                            time.sleep(SSHManager.RETRY_DELAY)
                        else:
                            raise Exception("Fallo en verificaci√≥n de integridad despu√©s de m√∫ltiples intentos")
                            
            except Exception as e:
                logging.error(f"Error en descarga (intento {attempt + 1}): {str(e)}")
                if attempt == SSHManager.MAX_RETRIES - 1:
                    st.error(f"Error descargando archivo remoto despu√©s de {SSHManager.MAX_RETRIES} intentos: {str(e)}")
                    return False
                    
            finally:
                ssh.close()

def ejecutar_generador_remoto():
    """Ejecuta el script generadorcongresos.sh en el servidor remoto"""
    ssh = None
    try:
        with st.spinner("üîÑ Ejecutando generadorcongresos.sh en servidor remoto..."):
            # Establecer conexi√≥n SSH
            ssh = SSHManager.get_connection()
            if not ssh:
                return False

            # 1. Verificar que el script existe
            sftp = ssh.open_sftp()
            try:
                sftp.stat(CONFIG.REMOTE_GENERADOR_PATH)
                logging.info(f"Script encontrado en: {CONFIG.REMOTE_GENERADOR_PATH}")
            except FileNotFoundError:
                st.error(f"‚ùå Error: No se encontr√≥ el script en {CONFIG.REMOTE_GENERADOR_PATH}")
                logging.error(f"Script no encontrado: {CONFIG.REMOTE_GENERADOR_PATH}")
                return False
            finally:
                sftp.close()

            # 2. Ejecutar el script en el directorio correcto
            comando = f"cd {CONFIG.REMOTE['DIR']} && bash {CONFIG.REMOTE_GENERADOR_PATH}"
            logging.info(f"Ejecutando comando: {comando}")
            
            stdin, stdout, stderr = ssh.exec_command(comando)
            exit_status = stdout.channel.recv_exit_status()
            output = stdout.read().decode('utf-8').strip()
            error = stderr.read().decode('utf-8').strip()

            # 3. Verificar resultados
            if exit_status != 0:
                error_msg = f"C√≥digo {exit_status}\nOutput: {output}\nError: {error}"
                st.error(f"‚ùå Error en la ejecuci√≥n: {error_msg}")
                logging.error(f"Error ejecutando generadorcongresos.sh: {error_msg}")
                return False

            logging.info("Script ejecutado correctamente")
            
            # 4. Verificar que el archivo se cre√≥ en la ubicaci√≥n correcta
            sftp = ssh.open_sftp()
            output_path = os.path.join(CONFIG.REMOTE['DIR'], CONFIG.REMOTE_CONGRESOS_FILE)
            try:
                sftp.stat(output_path)
                file_size = sftp.stat(output_path).st_size
                logging.info(f"Archivo creado en: {output_path} (Tama√±o: {file_size} bytes)")
                st.success("‚úÖ generadorcongresos.sh ejecutado correctamente en el servidor")
                return True
                
            except FileNotFoundError:
                error_msg = f"No se encontr√≥ el archivo de salida en {output_path}"
                st.error(f"‚ùå Error: {error_msg}")
                logging.error(error_msg)
                return False
            finally:
                sftp.close()

    except Exception as e:
        error_msg = f"Error inesperado: {str(e)}"
        st.error(f"‚ùå {error_msg}")
        logging.error(f"Error en ejecutar_generador_remoto: {error_msg}")
        return False
    finally:
        if ssh:
            ssh.close()

def sync_congresos_file():
    """Sincroniza el archivo pro_congresos_total.csv desde el servidor remoto"""
    try:
        remote_path = os.path.join(CONFIG.REMOTE['DIR'], CONFIG.REMOTE_CONGRESOS_FILE)
        local_path = "pro_congresos_total.csv"
        
        with st.spinner("üîÑ Sincronizando archivo pro_congresos_total.csv desde el servidor..."):
            if SSHManager.download_remote_file(remote_path, local_path):
                st.success("‚úÖ Archivo pro_congresos_total.csv sincronizado correctamente")
                return True
            else:
                st.error("‚ùå No se pudo descargar el archivo pro_congresos_total.csv del servidor")
                return False
    except Exception as e:
        st.error(f"‚ùå Error en sincronizaci√≥n: {str(e)}")
        logging.error(f"Sync Error: {str(e)}")
        return False

def highlight_author(author: str, investigator_name: str) -> str:
    """Resalta el nombre del investigador principal"""
    if investigator_name and investigator_name.lower() == author.lower():
        return f"<span style='background-color: {CONFIG.HIGHLIGHT_COLOR};'>{author}</span>"
    return author

def generar_tabla_resumen(unique_congresos, filtered_df):
    """Genera una tabla consolidada con todos los totales"""
    datos_resumen = []
    
    # 1. Total presentaciones √∫nicas
    total_presentaciones = len(unique_congresos)
    datos_resumen.append(("Presentaciones √∫nicas", total_presentaciones))
    
    # 2. Congresos distintos
    total_congresos = unique_congresos['titulo_congreso'].nunique()
    datos_resumen.append(("Congresos distintos", total_congresos))
    
    # 3. Tipos de congreso
    total_tipos = unique_congresos['tipo_congreso'].nunique()
    datos_resumen.append(("Tipos de congreso distintos", total_tipos))
    
    # 4. Pa√≠ses
    total_paises = unique_congresos['pais'].nunique()
    datos_resumen.append(("Pa√≠ses distintos", total_paises))
    
    # 5. L√≠neas de investigaci√≥n
    try:
        all_keywords = []
        for keywords in unique_congresos['linea_investigacion']:
            if pd.notna(keywords):
                keywords_str = str(keywords).strip()
                keyword_list = [k.strip() for k in keywords_str.split(",") if k.strip()]
                all_keywords.extend(keyword_list)
        total_keywords = len(set(all_keywords)) if all_keywords else 0
        datos_resumen.append(("L√≠neas de investigaci√≥n distintas", total_keywords))
    except:
        datos_resumen.append(("L√≠neas de investigaci√≥n distintas", "N/D"))
    
    # 6. Departamentos
    if 'departamento' in unique_congresos.columns:
        total_deptos = unique_congresos['departamento'].nunique()
        datos_resumen.append(("Departamentos distintos", total_deptos))
    
    # 7. A√±os con participaci√≥n
    total_a√±os = unique_congresos['a√±o_congreso'].nunique()
    datos_resumen.append(("A√±os con participaci√≥n", total_a√±os))
    
    # 8. Nivel SNI
    if 'sni' in unique_congresos.columns:
        total_sni = unique_congresos['sni'].nunique()
        datos_resumen.append(("Niveles SNI distintos", total_sni))
    
    # 9. Nivel SII
    if 'sii' in unique_congresos.columns:
        total_sii = unique_congresos['sii'].nunique()
        datos_resumen.append(("Niveles SII distintos", total_sii))
    
    # 10. Nombramientos
    if 'nombramiento' in unique_congresos.columns:
        total_nombramientos = unique_congresos['nombramiento'].nunique()
        datos_resumen.append(("Tipos de nombramiento distintos", total_nombramientos))
    
    # 11. Roles
    if 'rol' in unique_congresos.columns:
        total_roles = unique_congresos['rol'].nunique()
        datos_resumen.append(("Roles distintos", total_roles))
    
    # Crear DataFrame
    resumen_df = pd.DataFrame(datos_resumen, columns=['Categor√≠a', 'Total'])
    
    return resumen_df

def aplicar_estilo_tabla(df):
    """Aplica estilo CSS para uniformizar el ancho de columnas"""
    styles = []
    for col in df.columns:
        styles.append({
            'selector': f'th.col_heading.col{df.columns.get_loc(col)}',
            'props': [('width', CONFIG.COLUMN_WIDTH)]
        })
        styles.append({
            'selector': f'td.col{df.columns.get_loc(col)}',
            'props': [('width', CONFIG.COLUMN_WIDTH)]
        })
    return df.style.set_table_styles(styles)

def mostrar_tabla_uniforme(df, titulo, ayuda=None, max_rows=10):
    """Muestra una tabla con columnas de ancho uniforme"""
    st.markdown(f"**{titulo}**")
    if ayuda:
        st.caption(ayuda)
    
    # Aplicar estilo CSS para uniformizar el ancho de columnas
    st.markdown(
        f"""
        <style>
            th, td {{
                width: {CONFIG.COLUMN_WIDTH} !important;
                min-width: {CONFIG.COLUMN_WIDTH} !important;
                max-width: {CONFIG.COLUMN_WIDTH} !important;
            }}
        </style>
        """,
        unsafe_allow_html=True
    )
    
    st.dataframe(df.head(max_rows), hide_index=True)

# ====================
# FUNCIONES DE M√âTRICAS PARA CONGRESOS
# ====================
def indice_prestigio_congreso(titulo_congreso, tipo_congreso):
    """Calcula el √çndice de Prestigio del Congreso (IPC)"""
    if pd.isna(titulo_congreso) or pd.isna(tipo_congreso):
        return 0.3

    titulo_congreso = str(titulo_congreso).lower()
    tipo_congreso = str(tipo_congreso).lower()

    # Congresos internacionales conocidos
    congresos_tier1 = [
        'american heart', 'european society of cardiology', 
        'world congress of cardiology', 'international congress'
    ]
    
    # Congresos nacionales importantes
    congresos_tier2 = [
        'congreso nacional', 'sociedad mexicana', 
        'reuni√≥n anual', 'simposio nacional'
    ]

    # Asignar puntaje seg√∫n tipo y nombre del congreso
    if tipo_congreso == 'internacional':
        if any(keyword in titulo_congreso for keyword in congresos_tier1):
            return 1.0
        return 0.7
    elif tipo_congreso == 'nacional':
        if any(keyword in titulo_congreso for keyword in congresos_tier2):
            return 0.6
        return 0.4
    else:
        return 0.3  # Congresos locales o no clasificados

def coeficiente_internacionalizacion(pais, tipo_congreso):
    """Calcula el Coeficiente de Internacionalizaci√≥n (CI) para congresos"""
    if pd.isna(pais) or pd.isna(tipo_congreso):
        return 0.0

    tipo_congreso = str(tipo_congreso).lower()
    pais = str(pais).strip()

    # Pa√≠ses con mayor prestigio en investigaci√≥n
    paises_tier1 = ['Estados Unidos', 'Reino Unido', 'Alemania', 'Jap√≥n', 'Canad√°']
    paises_tier2 = ['Francia', 'Italia', 'Espa√±a', 'Australia', 'Suiza']

    if tipo_congreso == 'internacional':
        if pais in paises_tier1:
            return 1.0
        elif pais in paises_tier2:
            return 0.8
        else:
            return 0.6
    else:
        return 0.3  # Congresos nacionales o locales

def indice_relevancia_tematica(linea_investigacion):
    """Calcula el √çndice de Relevancia Tem√°tica (IRT) para cardiolog√≠a"""
    if pd.isna(linea_investigacion):
        return 0.0

    keywords_cardio = [
        "card√≠aco", "miocardio", "arritmia", "isquemia",
        "hipertensi√≥n", "ECG", "insuficiencia card√≠aca",
        "coronario", "v√°lvula", "aterosclerosis", "angina"
    ]

    try:
        if isinstance(linea_investigacion, str):
            linea_investigacion = linea_investigacion.lower()
            matches = sum(1 for kw in keywords_cardio if kw in linea_investigacion)
            return min(matches / len(keywords_cardio), 1.0)  # Normalizado a 0-1
        return 0.0
    except:
        return 0.0

def main():
    st.set_page_config(
        page_title="An√°lisis de Congresos",
        page_icon="üìä",
        layout="wide"
    )

    # A√±adir logo en la parte superior
    if Path(CONFIG.LOGO_PATH).exists():
        st.image(CONFIG.LOGO_PATH, width=200)

    st.title("An√°lisis de Participaci√≥n en Congresos")

    # Paso 1: Ejecutar generador remoto para actualizar datos
    if not ejecutar_generador_remoto():
        st.warning("‚ö†Ô∏è Continuando con datos existentes (pueden no estar actualizados)")

    # Paso 2: Sincronizar archivo pro_congresos_total.csv
    if not sync_congresos_file():
        st.warning("‚ö†Ô∏è Trabajando con copia local de pro_congresos_total.csv debido a problemas de conexi√≥n")

    # Verificar si el archivo local existe
    if not Path("pro_congresos_total.csv").exists():
        st.error("No se encontr√≥ el archivo pro_congresos_total.csv")
        return

    try:
        # Leer y procesar el archivo
        df = pd.read_csv("pro_congresos_total.csv", header=0, encoding='utf-8')
        df.columns = df.columns.str.strip()

        # Verificar campos importantes
        required_columns = ['economic_number', 'titulo_presentacion', 'titulo_congreso', 
                          'tipo_congreso', 'pais', 'a√±o_congreso', 'fecha_exacta_congreso',
                          'rol', 'linea_investigacion', 'pdf_filename', 'estado']
        missing_columns = [col for col in required_columns if col not in df.columns]

        if missing_columns:
            st.warning(f"El archivo pro_congresos_total.csv no contiene los campos requeridos: {', '.join(missing_columns)}")
            return

        # Convertir y validar fechas
        df['fecha_exacta_congreso'] = pd.to_datetime(df['fecha_exacta_congreso'], errors='coerce')
        df = df[df['estado'] == 'A'].copy()

        if df.empty:
            st.warning("No hay congresos v√°lidos para analizar")
            return

        st.success(f"Datos cargados correctamente. Registros activos: {len(df)}")

        # Obtener rangos de fechas disponibles
        min_date = df['fecha_exacta_congreso'].min()
        max_date = df['fecha_exacta_congreso'].max()

        # Selector de rango de fechas
        st.header("üìÖ Selecci√≥n de Periodo")
        col1, col2 = st.columns(2)

        with col1:
            start_date = st.date_input("Fecha inicio", min_date)

        with col2:
            end_date = st.date_input("Fecha t√©rmino", max_date)

        # Filtrar dataframe
        filtered_df = df[(df['fecha_exacta_congreso'] >= pd.to_datetime(start_date)) &
                       (df['fecha_exacta_congreso'] <= pd.to_datetime(end_date))].copy()

        # Obtener presentaciones √∫nicas (basado en t√≠tulo de presentaci√≥n)
        unique_congresos = filtered_df.drop_duplicates(subset=['titulo_presentacion']).copy()

        st.markdown(f"**Periodo seleccionado:** {start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')}")
        st.markdown(f"**Registros encontrados:** {len(filtered_df)}")
        st.markdown(f"**Presentaciones √∫nicas:** {len(unique_congresos)}")

        if filtered_df.empty:
            st.warning("No hay congresos en el periodo seleccionado")
            return

        # =============================================
        # TABLA DE PRODUCTIVIDAD POR INVESTIGADOR
        # =============================================
        st.header("üîç Productividad por investigador")
        investigator_stats = filtered_df.groupby(['economic_number']).agg(
            Presentaciones_Unicas=('titulo_presentacion', lambda x: len(set(x))),
            Congresos_Distintos=('titulo_congreso', 'nunique'),
            Paises_Visitados=('pais', 'nunique'),
            Roles=('rol', lambda x: ', '.join(sorted(set(x))))
        ).reset_index()
        
        # Agregar informaci√≥n de nombramiento, SNI, SII si existe
        if 'nombramiento' in df.columns and 'sni' in df.columns and 'sii' in df.columns:
            investigator_info = df[['economic_number', 'nombramiento', 'sni', 'sii']].drop_duplicates()
            investigator_stats = pd.merge(investigator_stats, investigator_info, on='economic_number', how='left')
        
        investigator_stats = investigator_stats.sort_values('Presentaciones_Unicas', ascending=False)
        investigator_stats.columns = ['N√∫mero econ√≥mico', 'Presentaciones √∫nicas', 'Congresos distintos', 
                                    'Pa√≠ses visitados', 'Roles', 'Nombramiento', 'SNI', 'SII']

        mostrar_tabla_uniforme(investigator_stats, "Productividad por investigador")

        # Detalle expandible por investigador
        for index, row in investigator_stats.iterrows():
            with st.expander(f"{row['N√∫mero econ√≥mico']} - {row['Presentaciones √∫nicas']} presentaciones"):
                investigator_congresos = filtered_df[filtered_df['economic_number'] == row['N√∫mero econ√≥mico']]
                unique_congresos_investigator = investigator_congresos.drop_duplicates(subset=['titulo_presentacion'])

                display_columns = ['titulo_presentacion', 'titulo_congreso', 'tipo_congreso', 
                                 'pais', 'fecha_exacta_congreso', 'rol']
                if 'sni' in unique_congresos_investigator.columns and 'sii' in unique_congresos_investigator.columns:
                    display_columns.extend(['sni', 'sii'])
                if 'nombramiento' in unique_congresos_investigator.columns:
                    display_columns.append('nombramiento')

                st.write(f"Presentaciones de {row['N√∫mero econ√≥mico']}:")
                mostrar_tabla_uniforme(unique_congresos_investigator[display_columns], "")

                # Secci√≥n de archivos PDF
                st.subheader("üìÑ Archivos disponibles")
                pdf_files = unique_congresos_investigator['pdf_filename'].dropna().unique()

                if len(pdf_files) > 0:
                    st.info(f"Se encontraron {len(pdf_files)} archivos para este investigador")
                    selected_pdf = st.selectbox(
                        "Seleccione un archivo para ver:",
                        pdf_files,
                        key=f"pdf_selector_{row['N√∫mero econ√≥mico']}_{index}"
                    )

                    if selected_pdf:
                        temp_pdf_path = f"temp_{selected_pdf}"
                        remote_pdf_path = os.path.join(CONFIG.REMOTE['DIR'], selected_pdf)

                        if SSHManager.download_remote_file(remote_pdf_path, temp_pdf_path):
                            with open(temp_pdf_path, "rb") as f:
                                pdf_bytes = f.read()

                            st.download_button(
                                label="Descargar este archivo",
                                data=pdf_bytes,
                                file_name=selected_pdf,
                                mime="application/pdf",
                                key=f"download_pdf_{row['N√∫mero econ√≥mico']}_{index}"
                            )

                            try:
                                os.remove(temp_pdf_path)
                            except:
                                pass
                        else:
                            st.error("No se pudo descargar el PDF seleccionado")
                else:
                    st.warning("No se encontraron archivos PDF para este investigador")

                csv = unique_congresos_investigator.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="Descargar participaci√≥n en congresos (CSV)",
                    data=csv,
                    file_name=f"congresos_{row['N√∫mero econ√≥mico']}.csv",
                    mime='text/csv',
                    key=f"download_csv_{row['N√∫mero econ√≥mico']}_{index}"
                )

        # =============================================
        # SECCI√ìN DE M√âTRICAS DE CALIDAD
        # =============================================
        st.header("üìä M√©tricas de Calidad de Participaci√≥n")

        # Calcular m√©tricas para cada presentaci√≥n √∫nica
        with st.spinner("Calculando m√©tricas de calidad..."):
            unique_congresos = unique_congresos.assign(
                IPC=unique_congresos.apply(lambda x: indice_prestigio_congreso(x['titulo_congreso'], x['tipo_congreso']), axis=1),
                CI=unique_congresos.apply(lambda x: coeficiente_internacionalizacion(x['pais'], x['tipo_congreso']), axis=1),
                IRT=unique_congresos['linea_investigacion'].apply(indice_relevancia_tematica)
            )
            unique_congresos = unique_congresos.assign(
                PI=0.5 * unique_congresos['IPC'] + 0.3 * unique_congresos['CI'] + 0.2 * unique_congresos['IRT']
            )

        # Mostrar tabla de resultados por investigador
        st.subheader("M√©tricas por Investigador")
        metrics_by_investigator = unique_congresos.groupby('economic_number').agg({
            'IPC': 'mean',
            'CI': 'mean',
            'IRT': 'mean',
            'PI': 'mean',
            'titulo_presentacion': 'count'
        }).reset_index()

        metrics_by_investigator.columns = [
            'N√∫mero econ√≥mico',
            'Prestigio Congreso (IPC) Promedio',
            'Internacionalizaci√≥n (CI) Promedio',
            'Relevancia Tem√°tica (IRT) Promedio',
            'Puntaje Integrado (PI) Promedio',
            'Presentaciones Evaluadas'
        ]

        metrics_by_investigator = metrics_by_investigator.sort_values('Puntaje Integrado (PI) Promedio', ascending=False)
        metrics_by_investigator = metrics_by_investigator.round(2)

        mostrar_tabla_uniforme(metrics_by_investigator, "Resumen de M√©tricas por Investigador")

        # Bot√≥n para explicaci√≥n de m√©tricas
        with st.expander("‚ÑπÔ∏è Explicaci√≥n de las M√©tricas", expanded=False):
            st.markdown("""
            ### √çndice de Prestigio del Congreso (IPC)
            **F√≥rmula:**
            Clasificaci√≥n de congresos en 4 niveles con valores de 0.3 a 1.0
            - **1.0**: Congresos internacionales de alto prestigio
            - **0.7**: Congresos internacionales generales
            - **0.6**: Congresos nacionales importantes
            - **0.4**: Congresos nacionales generales
            - **0.3**: Otros eventos

            **Prop√≥sito:** Evaluar el prestigio del congreso donde se particip√≥.
            """)

            st.markdown("""
            ### Coeficiente de Internacionalizaci√≥n (CI)
            **F√≥rmula:**
            - Internacional: 0.6-1.0 (seg√∫n pa√≠s)
            - Nacional: 0.3

            **Prop√≥sito:** Medir alcance geogr√°fico de la participaci√≥n.
            """)

            st.markdown("""
            ### √çndice de Relevancia Tem√°tica (IRT)
            **F√≥rmula:**
            IRT = (N¬∞ t√©rminos de cardiolog√≠a) / (Total t√©rminos relevantes)

            **Prop√≥sito:** Evaluar relaci√≥n con √°rea de cardiolog√≠a.
            """)

            st.markdown("""
            ### Puntaje Integrado (PI)
            **F√≥rmula:**
            PI = (0.5 √ó IPC) + (0.3 √ó CI) + (0.2 √ó IRT)

            **Interpretaci√≥n:**
            0.8-1.0: Excelente | 0.6-0.79: Bueno | 0.4-0.59: Aceptable | <0.4: Bajo
            """)

        # Mostrar tabla completa de presentaciones con m√©tricas
        st.subheader("Resultados Detallados por Presentaci√≥n")
        metricas_df = unique_congresos[[
            'titulo_presentacion', 'economic_number', 'titulo_congreso', 'tipo_congreso',
            'IPC', 'CI', 'IRT', 'PI'
        ]].sort_values('PI', ascending=False)

        metricas_df.columns = [
            'T√≠tulo Presentaci√≥n', 'N√∫mero econ√≥mico', 'Congreso', 'Tipo Congreso',
            'Prestigio Congreso (IPC)', 'Internacionalizaci√≥n (CI)',
            'Relevancia Tem√°tica (IRT)', 'Puntaje Integrado (PI)'
        ]

        metricas_df = metricas_df.round(2)
        mostrar_tabla_uniforme(metricas_df, "")

        # =============================================
        # TOP 5 PRESENTACIONES POR CALIDAD
        # =============================================
        st.header("üèÜ Presentaciones Destacadas")
        top_presentaciones = unique_congresos.nlargest(5, 'PI')[[
            'titulo_presentacion', 'economic_number', 'titulo_congreso', 'PI', 'IPC', 'CI', 'IRT'
        ]]
        top_presentaciones.columns = [
            'T√≠tulo Presentaci√≥n', 'N√∫mero econ√≥mico', 'Congreso',
            'Puntaje Integrado', 'Prestigio Congreso',
            'Internacionalizaci√≥n', 'Relevancia Tem√°tica'
        ]

        mostrar_tabla_uniforme(top_presentaciones.round(2), "Top 5 presentaciones por Calidad Integral")

        # Bot√≥n para criterios de selecci√≥n
        with st.expander("‚ÑπÔ∏è Criterios de Selecci√≥n", expanded=False):
            st.markdown("""
            **Presentaciones destacadas** se seleccionan por mayor Puntaje Integrado (PI) que combina:
            - 50% Prestigio del congreso (IPC)
            - 30% Internacionalizaci√≥n (CI)
            - 20% Relevancia tem√°tica (IRT)

            Las presentaciones con PI ‚â• 0.8 tienen calidad excepcional en los tres aspectos evaluados.
            """)

        # =============================================
        # SECCI√ìN DE DESCARGAS GLOBALES
        # =============================================
        st.header("üì• Exportar Resultados")
        col1, col2, col3 = st.columns(3)

        with col1:
            csv_metricas = metricas_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="Descargar m√©tricas de calidad (CSV)",
                data=csv_metricas,
                file_name="metricas_calidad_congresos.csv",
                mime='text/csv'
            )

        with col2:
            if Path("pro_congresos_total.csv").exists():
                with open("pro_congresos_total.csv", "rb") as file:
                    st.download_button(
                        label="Descargar dataset completo",
                        data=file,
                        file_name="pro_congresos_total.csv",
                        mime="text/csv"
                    )

        with col3:
            # Bot√≥n para descargar todos los PDFs con prefijo CON
            if st.button("Descargar todos los PDFs (CON)"):
                with st.spinner("Buscando archivos PDF en el servidor..."):
                    ssh = SSHManager.get_connection()
                    if ssh:
                        try:
                            with ssh.open_sftp() as sftp:
                                sftp.chdir(CONFIG.REMOTE['DIR'])
                                pdf_files = []
                                for filename in sftp.listdir():
                                    if (filename.startswith('CON')) and filename.lower().endswith('.pdf'):
                                        pdf_files.append(filename)

                                if not pdf_files:
                                    st.warning("No se encontraron archivos PDF con prefijo CON")
                                else:
                                    st.info(f"Se encontraron {len(pdf_files)} archivos PDF")

                                    # Crear un archivo ZIP con todos los PDFs
                                    zip_buffer = io.BytesIO()
                                    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                                        for pdf_file in pdf_files:
                                            temp_path = f"temp_{pdf_file}"
                                            remote_path = os.path.join(CONFIG.REMOTE['DIR'], pdf_file)
                                            if SSHManager.download_remote_file(remote_path, temp_path):
                                                zip_file.write(temp_path, pdf_file)
                                                os.remove(temp_path)

                                    zip_buffer.seek(0)
                                    st.download_button(
                                        label="Descargar todos los PDFs (ZIP)",
                                        data=zip_buffer,
                                        file_name="pdfs_congresos.zip",
                                        mime="application/zip",
                                        key="download_all_pdfs"
                                    )
                        except Exception as e:
                            st.error(f"Error al acceder a los archivos PDF: {str(e)}")
                            logging.error(f"Error al descargar PDFs: {str(e)}")
                        finally:
                            ssh.close()
                    else:
                        st.error("No se pudo establecer conexi√≥n con el servidor")

    except Exception as e:
        st.error(f"Error al procesar el archivo: {str(e)}")
        logging.error(f"Error en main: {str(e)}")

if __name__ == "__main__":
    main()
