import streamlit as st
import pandas as pd
import io
from datetime import datetime
import calendar
import paramiko
import time
import os
import logging
from pathlib import Path
from PIL import Image

# Configuraci√≥n de logging
logging.basicConfig(
    filename='capitulos.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# ====================
# CATEGOR√çAS DE KEYWORDS PARA CAP√çTULOS
# ====================
KEYWORD_CATEGORIES = {
    "Accidente Cerebrovascular": ["accidente cerebrovascular", "acv", "ictus", "stroke"],
    "Alzheimer": ["alzheimer", "demencia", "enfermedad neurodegenerativa"],
    "Arritmias": [
        "arritmia", "fibrilaci√≥n auricular", "fa", "flutter auricular",
        "taquicardia ventricular", "tv", "fibrilaci√≥n ventricular", "fv",
        "bradicardia", "bloqueo auriculoventricular", "s√≠ndrome de brugada",
        "s√≠ndrome de qt largo", "marcapasos", "desfibrilador autom√°tico"
    ],
    "Bioinform√°tica": ["bioinform√°tica", "gen√≥mica computacional", "an√°lisis de secuencias", "biolog√≠a de sistemas"],
    "Bioqu√≠mica": ["bioqu√≠mica", "metabolismo", "enzimas", "rutas metab√≥licas"],
    "Biolog√≠a Molecular": ["adn", "arn", "transcripci√≥n", "replicaci√≥n"],
    "Biomarcadores Card√≠acos": [
        "troponina", "nt-probnp", "bnp", "ck-mb", "lactato deshidrogenasa",
        "mioglobina", "p√©ptidos natriur√©ticos"
    ],
    "Biotecnolog√≠a": ["biotecnolog√≠a", "terapia g√©nica", "crispr", "organismos modificados gen√©ticamente"],
    "C√°ncer de Mama": ["c√°ncer de mama", "tumor mamario", "neoplasia mamaria"],
    "Cardiolog√≠a Pedi√°trica": [
        "cardiopat√≠a cong√©nita", "comunicaci√≥n interauricular", "cia",
        "comunicaci√≥n interventricular", "civ", "tetralog√≠a de fallot",
        "transposici√≥n grandes vasos", "ductus arterioso persistente"
    ],
    "Cardiomiopat√≠as": [
        "cardiomiopat√≠a", "miocardiopat√≠a", "cardiomiopat√≠a hipertr√≥fica", "hcm",
        "cardiomiopat√≠a dilatada", "dcm", "cardiomiopat√≠a restrictiva",
        "displasia arritmog√©nica", "miocardiopat√≠a no compactada", "amiloidosis card√≠aca"
    ],
    "Endocrinolog√≠a": ["diabetes", "tiroides", "hormonas", "metabolismo"],
    "Enfermedad Vascular Perif√©rica": [
        "enfermedad arterial perif√©rica", "eap", "claudicaci√≥n intermitente",
        "√≠ndice tobillo-brazo", "isquemia cr√≠tica", "arteriopat√≠a obliterante"
    ],
    "Epidemiolog√≠a": ["epidemiolog√≠a", "estudios poblacionales", "incidencia", "prevalencia"],
    "Epilepsia": ["epilepsia", "crisis epil√©ptica", "convulsiones"],
    "Farmacolog√≠a": ["farmacolog√≠a", "f√°rmacos", "dosis-respuesta", "toxicidad"],
    "Gastroenterolog√≠a": ["colon", "h√≠gado", "p√°ncreas", "enfermedad inflamatoria intestinal"],
    "Gen√©tica": ["gen√©tica", "mutaciones", "genoma humano", "s√≠ndromes gen√©ticos"],
    "Hipertensi√≥n y Riesgo Cardiovascular": [
        "hipertensi√≥n arterial", "hta", "hipertensi√≥n pulmonar",
        "crisis hipertensiva", "mapa", "monitorizaci√≥n ambulatoria",
        "riesgo cardiovascular", "score framingham", "ascvd"
    ],
    "Inmunolog√≠a": ["autoinmunidad", "inmunodeficiencia", "alergias", "linfocitos"],
    "Inmunoterapia": ["inmunoterapia", "terapia car-t", "checkpoint inmunol√≥gico"],
    "Insuficiencia Card√≠aca": [
        "insuficiencia card√≠aca", "ic", "fallo card√≠aco", "disfunci√≥n ventricular",
        "icfe", "icfd", "fracci√≥n de eyecci√≥n reducida", "fracci√≥n de eyecci√≥n preservada",
        "nyha clase ii", "nyha clase iii", "edema pulmonar", "congesti√≥n venosa"
    ],
    "Investigaci√≥n Cl√≠nica": ["ensayo cl√≠nico", "randomizado", "estudio de cohorte", "fase iii"],
    "Leucemia": ["leucemia", "leucemias agudas", "leucemia mieloide"],
    "Microbiolog√≠a": ["microbiolog√≠a", "bacterias", "virus", "antimicrobianos"],
    "Nefrolog√≠a": ["insuficiencia renal", "glomerulonefritis", "di√°lisis"],
    "Neumolog√≠a": ["asma", "epoc", "fibrosis pulmonar", "s√≠ndrome de apnea del sue√±o"],
    "Neurociencia": ["neurociencia", "plasticidad neuronal", "sinapsis", "neurodegeneraci√≥n"],
    "Oncolog√≠a Molecular": ["oncolog√≠a molecular", "mutaciones tumorales", "biomarcadores c√°ncer"],
    "Procedimientos Cardiol√≥gicos": [
        "cateterismo card√≠aco", "angioplastia", "stent coronario",
        "bypass coronario", "cabg", "ecocardiograma", "eco stress",
        "resonancia card√≠aca", "prueba de esfuerzo", "holter"
    ],
    "S√≠ndrome Coronario Agudo": [
        "s√≠ndrome coronario agudo", "sca", "infarto agudo de miocardio", "iam",
        "iamcest", "iamnest", "angina inestabile", "troponina elevada",
        "oclusi√≥n coronaria", "elevaci√≥n st", "depresi√≥n st"
    ],
    "Valvulopat√≠as": [
        "valvulopat√≠a", "estenosis a√≥rtica", "insuficiencia a√≥rtica",
        "stenosis mitral", "insuficiencia mitral", "prolapso mitral",
        "tavi", "taavi", "anillo mitral", "reemplazo valvular"
    ],
}

# ====================
# CONFIGURACI√ìN INICIAL
# ====================
class Config:
    def __init__(self):
        # Configuraci√≥n SFTP
        self.REMOTE_CAPITULOS_FILE = "pro_capitulos_total.csv"  # Nombre completo del archivo remoto
        self.TIMEOUT_SECONDS = 30
        
        self.REMOTE = {
            'HOST': st.secrets["sftp"]["host"],
            'USER': st.secrets["sftp"]["user"],
            'PASSWORD': st.secrets["sftp"]["password"],
            'PORT': st.secrets["sftp"]["port"],
            'DIR': st.secrets["sftp"]["dir"]
        }
        
        # Configuraci√≥n de estilo
        self.HIGHLIGHT_COLOR = "#90EE90"
        self.LOGO_PATH = "escudo_COLOR.jpg"

CONFIG = Config()

# ==================
# CLASE SSH MEJORADA
# ==================
class SSHManager:
    MAX_RETRIES = 3
    RETRY_DELAY = 5  # segundos

    @staticmethod
    def get_connection():
        """Establece conexi√≥n SSH segura con reintentos"""
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        for attempt in range(SSHManager.MAX_RETRIES):
            try:
                ssh.connect(
                    hostname=CONFIG.REMOTE['HOST'],
                    port=CONFIG.REMOTE['PORT'],
                    username=CONFIG.REMOTE['USER'],
                    password=CONFIG.REMOTE['PASSWORD'],
                    timeout=CONFIG.TIMEOUT_SECONDS
                )
                logging.info(f"Conexi√≥n SSH establecida (intento {attempt + 1})")
                return ssh
            except Exception as e:
                logging.warning(f"Intento {attempt + 1} fallido: {str(e)}")
                if attempt < SSHManager.MAX_RETRIES - 1:
                    time.sleep(SSHManager.RETRY_DELAY)
                else:
                    logging.error("Fallo definitivo al conectar via SSH")
                    st.error(f"Error de conexi√≥n SSH despu√©s de {SSHManager.MAX_RETRIES} intentos: {str(e)}")
                    return None

    @staticmethod
    def verify_file_integrity(local_path, remote_path, sftp):
        """Verifica que el archivo se transfiri√≥ correctamente"""
        try:
            local_size = os.path.getsize(local_path)
            remote_size = sftp.stat(remote_path).st_size
            return local_size == remote_size
        except Exception as e:
            logging.error(f"Error verificando integridad: {str(e)}")
            return False

    @staticmethod
    def download_remote_file(remote_path, local_path):
        """Descarga un archivo con verificaci√≥n de integridad"""
        for attempt in range(SSHManager.MAX_RETRIES):
            ssh = SSHManager.get_connection()
            if not ssh:
                return False
                
            try:
                with ssh.open_sftp() as sftp:
                    try:
                        sftp.stat(remote_path)
                    except FileNotFoundError:
                        logging.error(f"Archivo remoto no encontrado: {remote_path}")
                        return False
                        
                    sftp.get(remote_path, local_path)
                    
                    if SSHManager.verify_file_integrity(local_path, remote_path, sftp):
                        logging.info(f"Archivo descargado correctamente: {remote_path} a {local_path}")
                        return True
                    else:
                        logging.warning(f"Error de integridad en descarga, reintentando... (intento {attempt + 1})")
                        if attempt < SSHManager.MAX_RETRIES - 1:
                            time.sleep(SSHManager.RETRY_DELAY)
                        else:
                            raise Exception("Fallo en verificaci√≥n de integridad despu√©s de m√∫ltiples intentos")
                            
            except Exception as e:
                logging.error(f"Error en descarga (intento {attempt + 1}): {str(e)}")
                if attempt == SSHManager.MAX_RETRIES - 1:
                    st.error(f"Error descargando archivo remoto despu√©s de {SSHManager.MAX_RETRIES} intentos: {str(e)}")
                    return False
                    
            finally:
                ssh.close()

def sync_capitulos_file():
    """Sincroniza el archivo capitulos_total.csv desde el servidor remoto"""
    try:
        remote_path = os.path.join(CONFIG.REMOTE['DIR'], CONFIG.REMOTE_CAPITULOS_FILE)
        local_path = "capitulos_total.csv"
        
        with st.spinner("üîÑ Sincronizando archivo capitulos_total.csv desde el servidor..."):
            if SSHManager.download_remote_file(remote_path, local_path):
                st.success("‚úÖ Archivo capitulos_total.csv sincronizado correctamente")
                return True
            else:
                st.error("‚ùå No se pudo descargar el archivo capitulos_total.csv del servidor")
                return False
    except Exception as e:
        st.error(f"‚ùå Error en sincronizaci√≥n: {str(e)}")
        logging.error(f"Sync Error: {str(e)}")
        return False

def highlight_author(author: str, investigator_name: str) -> str:
    """Resalta el nombre del investigador principal"""
    if investigator_name and investigator_name.lower() == author.lower():
        return f"<span style='background-color: {CONFIG.HIGHLIGHT_COLOR};'>{author}</span>"
    return author

def main():
    st.set_page_config(
        page_title="An√°lisis de Cap√≠tulos",
        page_icon="üìö",
        layout="wide"
    )
    
    # A√±adir logo en la parte superior
    if Path(CONFIG.LOGO_PATH).exists():
        st.image(CONFIG.LOGO_PATH, width=200)
    
    st.title("An√°lisis de Cap√≠tulos de Libros")
    
    # Sincronizar archivo capitulos_total.csv al inicio
    if not sync_capitulos_file():
        st.warning("‚ö†Ô∏è Trabajando con copia local de capitulos_total.csv debido a problemas de conexi√≥n")
    
    # Verificar si el archivo local existe
    if not Path("capitulos_total.csv").exists():
        st.error("No se encontr√≥ el archivo capitulos_total.csv")
        return
    
    try:
        # Leer y procesar el archivo con los nuevos campos sni y sii
        df = pd.read_csv("capitulos_total.csv")
        
        # Verificar que los campos importantes existen
        required_columns = ['autor_principal', 'titulo_libro', 'titulo_capitulo', 'pub_date', 'estado', 'selected_keywords']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.warning(f"El archivo capitulos_total.csv no contiene los campos requeridos: {', '.join(missing_columns)}")
            return
        
        # Convertir y validar fechas
        df['pub_date'] = pd.to_datetime(df['pub_date'], errors='coerce')
        df = df[(df['estado'] == 'A') & (df['pub_date'].notna())]
        
        if df.empty:
            st.warning("No hay cap√≠tulos v√°lidos para analizar")
            return
        
        st.success(f"Datos cargados correctamente. Registros activos: {len(df)}")
        
        # Obtener rangos de fechas disponibles
        min_date = df['pub_date'].min()
        max_date = df['pub_date'].max()
        
        # Selector de rango mes-a√±o con ayuda
        st.header("üìÖ Selecci√≥n de Periodo")
        col1, col2 = st.columns(2)
        
        with col1:
            start_year = st.selectbox("A√±o inicio", 
                                   range(min_date.year, max_date.year+1),
                                   index=0,
                                   help="Selecciona el a√±o inicial para el an√°lisis.")
            start_month = st.selectbox("Mes inicio", 
                                    range(1, 13), 
                                    index=min_date.month-1,
                                    format_func=lambda x: datetime(1900, x, 1).strftime('%B'),
                                    help="Selecciona el mes inicial para el an√°lisis.")
        
        with col2:
            end_year = st.selectbox("A√±o t√©rmino", 
                                  range(min_date.year, max_date.year+1),
                                  index=len(range(min_date.year, max_date.year+1))-1,
                                  help="Selecciona el a√±o final para el an√°lisis.")
            end_month = st.selectbox("Mes t√©rmino", 
                                   range(1, 13), 
                                   index=max_date.month-1,
                                   format_func=lambda x: datetime(1900, x, 1).strftime('%B'),
                                   help="Selecciona el mes final para el an√°lisis.")
        
        # Calcular fechas de inicio y fin
        start_day = 1
        end_day = calendar.monthrange(end_year, end_month)[1]
        
        date_start = datetime(start_year, start_month, start_day)
        date_end = datetime(end_year, end_month, end_day)
        
        # Filtrar dataframe
        filtered_df = df[(df['pub_date'] >= pd.to_datetime(date_start)) & 
                       (df['pub_date'] <= pd.to_datetime(date_end))]
        
        # Obtener cap√≠tulos √∫nicos para estad√≠sticas precisas
        unique_capitulos = filtered_df.drop_duplicates(subset=['titulo_capitulo'])
        
        st.markdown(f"**Periodo seleccionado:** {date_start.strftime('%d/%m/%Y')} - {date_end.strftime('%d/%m/%Y')}",
                   help="Rango de fechas seleccionado para el an√°lisis.")
        st.markdown(f"**Registros encontrados:** {len(filtered_df)}",
                   help="Total de registros en el periodo, incluyendo posibles duplicados del mismo cap√≠tulo.")
        st.markdown(f"**Cap√≠tulos √∫nicos:** {len(unique_capitulos)}",
                   help="Cantidad de cap√≠tulos distintos, eliminando duplicados.")
        
        if len(filtered_df) != len(unique_capitulos):
            st.warning(f"‚ö†Ô∏è **Nota:** Se detectaron {len(filtered_df) - len(unique_capitulos)} registros duplicados del mismo cap√≠tulo.")
        
        if filtered_df.empty:
            st.warning("No hay cap√≠tulos en el periodo seleccionado")
            return
        
        # An√°lisis consolidado en tablas
        st.header("üìä Estad√≠sticas Consolidadas",
                help="M√©tricas generales basadas en los filtros aplicados.")
        
        # Tabla 1: Productividad por investigador (CAP√çTULOS √öNICOS) con participaci√≥n
        st.subheader("üîç Productividad por Investigador",
                   help="Muestra cu√°ntos cap√≠tulos √∫nicos tiene cada investigador y su tipo de participaci√≥n.")
        
        # Crear dataframe con informaci√≥n de participaci√≥n
        investigator_stats = filtered_df.groupby('autor_principal').agg(
            Cap√≠tulos_Unicos=('titulo_capitulo', lambda x: len(set(x))),
            Participaciones=('tipo_participacion', lambda x: ', '.join(sorted(set(x))))
        ).reset_index()
        
        investigator_stats = investigator_stats.sort_values('Cap√≠tulos_Unicos', ascending=False)
        investigator_stats.columns = ['Investigador', 'Cap√≠tulos √∫nicos', 'Tipo de participaci√≥n']
        
        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Investigador': ['TOTAL'],
            'Cap√≠tulos √∫nicos': [investigator_stats['Cap√≠tulos √∫nicos'].sum()],
            'Tipo de participaci√≥n': ['']
        })
        investigator_stats = pd.concat([investigator_stats.head(10), total_row], ignore_index=True)
        
        # Mostrar tabla con enlaces clickeables
        for index, row in investigator_stats.iterrows():
            if row['Investigador'] != 'TOTAL':
                # Crear un expander para cada investigador
                with st.expander(f"{row['Investigador']} - {row['Cap√≠tulos √∫nicos']} cap√≠tulos"):
                    # Filtrar los cap√≠tulos del investigador
                    investigator_capitulos = filtered_df[filtered_df['autor_principal'] == row['Investigador']]
                    unique_capitulos_investigator = investigator_capitulos.drop_duplicates(subset=['titulo_capitulo'])
                    
                    # Mostrar los cap√≠tulos (incluyendo los nuevos campos si existen)
                    display_columns = ['titulo_libro', 'titulo_capitulo', 'editorial', 'pub_date', 'isbn_issn']
                    if 'sni' in unique_capitulos_investigator.columns and 'sii' in unique_capitulos_investigator.columns:
                        display_columns.extend(['sni', 'sii'])
                    
                    st.write(f"Cap√≠tulos de {row['Investigador']}:")
                    st.dataframe(unique_capitulos_investigator[display_columns])
                    
                    # Opci√≥n para descargar en CSV
                    csv = unique_capitulos_investigator.to_csv(index=False).encode('utf-8')
                    st.download_button(
                        label="Descargar producci√≥n de cap√≠tulos en CSV",
                        data=csv,
                        file_name=f"capitulos_{row['Investigador'].replace(' ', '_')}.csv",
                        mime='text/csv',
                        key=f"download_{index}"
                    )
        
        # Tabla 2: Editoriales m√°s utilizadas (CAP√çTULOS √öNICOS)
        st.subheader("üè¢ Editoriales m√°s Utilizadas",
                   help="Listado de editoriales ordenadas por cantidad de cap√≠tulos publicados.")
        editorial_stats = unique_capitulos.groupby('editorial').agg(
            Total_Capitulos=('editorial', 'size')
        ).reset_index()
        editorial_stats = editorial_stats.sort_values('Total_Capitulos', ascending=False)
        editorial_stats.columns = ['Editorial', 'Cap√≠tulos √∫nicos']
        
        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Editorial': ['TOTAL'],
            'Cap√≠tulos √∫nicos': [editorial_stats['Cap√≠tulos √∫nicos'].sum()]
        })
        editorial_stats = pd.concat([editorial_stats.head(10), total_row], ignore_index=True)
        st.dataframe(editorial_stats, hide_index=True)
        
        # Tabla 3: Tipos de participaci√≥n m√°s comunes (CAP√çTULOS √öNICOS)
        st.subheader("üé≠ Tipos de Participaci√≥n",
                   help="Distribuci√≥n de los tipos de participaci√≥n en los cap√≠tulos.")
        participacion_stats = unique_capitulos['tipo_participacion'].value_counts().reset_index()
        participacion_stats.columns = ['Tipo de participaci√≥n', 'Cap√≠tulos √∫nicos']
        
        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Tipo de participaci√≥n': ['TOTAL'],
            'Cap√≠tulos √∫nicos': [participacion_stats['Cap√≠tulos √∫nicos'].sum()]
        })
        participacion_stats = pd.concat([participacion_stats, total_row], ignore_index=True)
        st.dataframe(participacion_stats, hide_index=True)
        
        # Tabla 4: Enfoques m√°s frecuentes (CAP√çTULOS √öNICOS)
        st.subheader("üß™ Enfoques m√°s Frecuentes",
                   help="Palabras clave m√°s utilizadas en los cap√≠tulos, indicando las √°reas de investigaci√≥n predominantes.")
        try:
            all_keywords = []
            for keywords in unique_capitulos['selected_keywords']:
                if pd.notna(keywords):
                    # Limpiar y procesar las palabras clave
                    cleaned = str(keywords).strip("[]'").replace("'", "").split(", ")
                    all_keywords.extend([k.strip() for k in cleaned if k.strip()])
            
            keyword_stats = pd.Series(all_keywords).value_counts().reset_index()
            keyword_stats.columns = ['Enfoque', 'Frecuencia']
            
            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Enfoque': ['TOTAL'],
                'Frecuencia': [keyword_stats['Frecuencia'].sum()]
            })
            keyword_stats = pd.concat([keyword_stats.head(10), total_row], ignore_index=True)
            st.dataframe(keyword_stats, hide_index=True)
        except Exception as e:
            st.warning(f"No se pudieron procesar las palabras clave: {str(e)}")
        
        # Tabla 5: Distribuci√≥n por departamentos (CAP√çTULOS √öNICOS)
        if 'departamento' in unique_capitulos.columns:
            st.subheader("üèõÔ∏è Distribuci√≥n por Departamento",
                       help="Clasificaci√≥n de cap√≠tulos seg√∫n el departamento de adscripci√≥n del autor principal.")
            depto_stats = unique_capitulos['departamento'].value_counts().reset_index()
            depto_stats.columns = ['Departamento', 'Cap√≠tulos √∫nicos']
            
            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Departamento': ['TOTAL'],
                'Cap√≠tulos √∫nicos': [depto_stats['Cap√≠tulos √∫nicos'].sum()]
            })
            depto_stats = pd.concat([depto_stats, total_row], ignore_index=True)
            st.dataframe(depto_stats, hide_index=True)
        else:
            st.warning("El campo 'departamento' no est√° disponible en los datos")
        
        # Tabla 6: Distribuci√≥n temporal (CAP√çTULOS √öNICOS)
        st.subheader("üï∞Ô∏è Distribuci√≥n Mensual",
                    help="Evoluci√≥n mensual de la producci√≥n de cap√≠tulos en el periodo seleccionado.")

        # Convertir a formato "YYYY-MM"
        time_stats = unique_capitulos['pub_date'].dt.to_period('M').astype(str).value_counts().sort_index().reset_index()
        time_stats.columns = ['Mes-A√±o', 'Cap√≠tulos √∫nicos']

        # A√±adir fila de totales
        total_row = pd.DataFrame({
            'Mes-A√±o': ['TOTAL'],
            'Cap√≠tulos √∫nicos': [time_stats['Cap√≠tulos √∫nicos'].sum()]
        })
        time_stats = pd.concat([time_stats, total_row], ignore_index=True)
        st.dataframe(time_stats, hide_index=True)
        
        # Tabla 7: Distribuci√≥n por nivel SNI (CAP√çTULOS √öNICOS)
        if 'sni' in unique_capitulos.columns:
            st.subheader("üìä Distribuci√≥n por Nivel SNI",
                        help="Clasificaci√≥n de cap√≠tulos seg√∫n el nivel del Sistema Nacional de Investigadores (SNI) de los autores.")
            sni_stats = unique_capitulos['sni'].value_counts().reset_index()
            sni_stats.columns = ['Nivel SNI', 'Cap√≠tulos √∫nicos']
            
            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Nivel SNI': ['TOTAL'],
                'Cap√≠tulos √∫nicos': [sni_stats['Cap√≠tulos √∫nicos'].sum()]
            })
            sni_stats = pd.concat([sni_stats, total_row], ignore_index=True)
            st.dataframe(sni_stats, hide_index=True)
        else:
            st.warning("El campo 'sni' no est√° disponible en los datos")
        
        # Tabla 8: Distribuci√≥n por nivel SII (CAP√çTULOS √öNICOS)
        if 'sii' in unique_capitulos.columns:
            st.subheader("üìà Distribuci√≥n por Nivel SII",
                        help="Clasificaci√≥n de cap√≠tulos seg√∫n el nivel del Sistema Institucional de Investigaci√≥n (SII) de los autores.")
            sii_stats = unique_capitulos['sii'].value_counts().reset_index()
            sii_stats.columns = ['Nivel SII', 'Cap√≠tulos √∫nicos']
            
            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Nivel SII': ['TOTAL'],
                'Cap√≠tulos √∫nicos': [sii_stats['Cap√≠tulos √∫nicos'].sum()]
            })
            sii_stats = pd.concat([sii_stats, total_row], ignore_index=True)
            st.dataframe(sii_stats, hide_index=True)
        else:
            st.warning("El campo 'sii' no est√° disponible en los datos")
        
        # Tabla 9: Distribuci√≥n por pa√≠ses de distribuci√≥n (CAP√çTULOS √öNICOS)
        if 'paises_distribucion' in unique_capitulos.columns:
            st.subheader("üåç Distribuci√≥n por Pa√≠ses",
                        help="Pa√≠ses donde se distribuyen los libros que contienen los cap√≠tulos publicados.")
            
            try:
                all_countries = []
                for countries in unique_capitulos['paises_distribucion']:
                    if pd.notna(countries):
                        cleaned = str(countries).strip().split(", ")
                        all_countries.extend([c.strip() for c in cleaned if c.strip()])
                
                country_stats = pd.Series(all_countries).value_counts().reset_index()
                country_stats.columns = ['Pa√≠s', 'Frecuencia']
                
                # A√±adir fila de totales
                total_row = pd.DataFrame({
                    'Pa√≠s': ['TOTAL'],
                    'Frecuencia': [country_stats['Frecuencia'].sum()]
                })
                country_stats = pd.concat([country_stats.head(10), total_row], ignore_index=True)
                st.dataframe(country_stats, hide_index=True)
            except:
                st.warning("No se pudieron procesar los pa√≠ses de distribuci√≥n")

        # Tabla 10: Distribuci√≥n por idioma (CAP√çTULOS √öNICOS)
        if 'idiomas_disponibles' in unique_capitulos.columns:
            st.subheader("üåê Distribuci√≥n por Idioma",
                        help="Idiomas en los que est√°n publicados los libros que contienen los cap√≠tulos.")
            idioma_stats = unique_capitulos['idiomas_disponibles'].value_counts().reset_index()
            idioma_stats.columns = ['Idioma', 'Cap√≠tulos √∫nicos']
            
            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Idioma': ['TOTAL'],
                'Cap√≠tulos √∫nicos': [idioma_stats['Cap√≠tulos √∫nicos'].sum()]
            })
            idioma_stats = pd.concat([idioma_stats, total_row], ignore_index=True)
            st.dataframe(idioma_stats, hide_index=True)
        else:
            st.warning("El campo 'idiomas_disponibles' no est√° disponible en los datos")
            
        # Tabla 11: Distribuci√≥n por formato (CAP√çTULOS √öNICOS)
        if 'formatos_disponibles' in unique_capitulos.columns:
            st.subheader("üìñ Distribuci√≥n por Formato",
                        help="Formatos disponibles para los libros que contienen los cap√≠tulos publicados.")
            formato_stats = unique_capitulos['formatos_disponibles'].value_counts().reset_index()
            formato_stats.columns = ['Formato', 'Cap√≠tulos √∫nicos']
            
            # A√±adir fila de totales
            total_row = pd.DataFrame({
                'Formato': ['TOTAL'],
                'Cap√≠tulos √∫nicos': [formato_stats['Cap√≠tulos √∫nicos'].sum()]
            })
            formato_stats = pd.concat([formato_stats, total_row], ignore_index=True)
            st.dataframe(formato_stats, hide_index=True)
        else:
            st.warning("El campo 'formatos_disponibles' no est√° disponible en los datos")
        
        # ==========================================
        # SECCI√ìN: DESCARGAR ARCHIVO COMPLETO
        # ==========================================
        st.header("üì• Descargar Datos Completos")
        
        # Opci√≥n para descargar el archivo pro_capitulos_total.csv
        if Path("capitulos_total.csv").exists():
            with open("capitulos_total.csv", "rb") as file:
                btn = st.download_button(
                    label="Descargar archivo pro_capitulos_total.csv completo",
                    data=file,
                    file_name="pro_capitulos_total.csv",
                    mime="text/csv",
                    help="Descarga el archivo CSV completo con todos los datos de cap√≠tulos"
                )
            if btn:
                st.success("Descarga iniciada")
        else:
            st.warning("El archivo capitulos_total.csv no est√° disponible para descargar")
        
    except Exception as e:
        st.error(f"Error al procesar el archivo: {str(e)}")
        logging.error(f"Error en main: {str(e)}")

if __name__ == "__main__":
    main()
